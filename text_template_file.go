package main

import (
	"bytes"
	"text/template"
)

const Template = `// Code generated by "{{.Flags}}"; DO NOT EDIT.
package {{.Package}}

var (
{{if .Map}}
	TMS_{{$.Type}}_Map = map[{{$.Type}}]interface{}{ {{range $k,$v:= .Names}}
		{{$v}}:nil, {{end}} 
	}
{{end}}
{{if .Slice}}
	TMS_{{$.Type}}_Slice = []{{$.Type}}{ {{range $k,$v:= .Names}}
		{{$v}},{{end}} 
	}
{{end}}
)
`

type TextTemplate struct {
	Flags   string   `validate:"required"`
	Package string   `validate:"required"`
	Type    string   `validate:"required"`
	Names   []string `validate:"required"`
	Map     bool
	Slice   bool
}

func (t TextTemplate) Generate() ([]byte, error) {
	if err := validate.Struct(t); err != nil {
		return nil, err
	}

	temp, err := template.New("").Parse(Template)
	if err != nil {
		return nil, err
	}

	b := bytes.Buffer{}
	if err := temp.Execute(&b, t); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}
